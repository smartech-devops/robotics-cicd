name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  AWS_REGION: eu-north-1
  AWS_ACCOUNT_ID: 485701710361

jobs:
  build-and-test:
    name: Build and Test Docker Image
    runs-on: ubuntu-latest
    
    permissions:
      id-token: write   # Required for OIDC
      contents: write   # Required for creating tags
      actions: read     # Required for checkout
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history for versioning
          
      - name: Generate version number
        id: version
        run: |
          # Get the latest tag, default to v0.0.0 if none exists
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          echo "Latest tag: $LATEST_TAG"
          
          # Extract version numbers (remove 'v' prefix if present)
          VERSION=${LATEST_TAG#v}
          
          # Split version into parts
          IFS='.' read -r MAJOR MINOR PATCH <<< "$VERSION"
          
          # Increment patch version
          PATCH=$((PATCH + 1))
          
          # Create new version
          NEW_VERSION="$MAJOR.$MINOR.$PATCH"
          NEW_TAG="v$NEW_VERSION"
          
          echo "New version: $NEW_VERSION"
          echo "New tag: $NEW_TAG"
          
          # Set outputs for other steps
          echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "tag=$NEW_TAG" >> $GITHUB_OUTPUT
          echo "build_date=$(date -u +'%Y-%m-%dT%H:%M:%SZ')" >> $GITHUB_OUTPUT
        
      - name: Configure AWS credentials using OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ env.AWS_ACCOUNT_ID }}:role/robotics-cicd-github-actions-role
          role-session-name: GitHubActions-CI-CD-Demo
          aws-region: ${{ env.AWS_REGION }}
      
      - name: Verify AWS identity
        run: |
          echo "AWS Account ID: $(aws sts get-caller-identity --query Account --output text)"
          echo "AWS Region: ${{ env.AWS_REGION }}"
          
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Build Docker image
        env:
          APP_VERSION: ${{ steps.version.outputs.version }}
          BUILD_DATE: ${{ steps.version.outputs.build_date }}
        run: |
          docker build \
            --build-arg APP_VERSION=$APP_VERSION \
            --build-arg BUILD_DATE="$BUILD_DATE" \
            -t robotics-cicd-demo:latest \
            -t robotics-cicd-demo:$APP_VERSION \
            ./app
          echo "Docker image built successfully with version $APP_VERSION"
          
      - name: Test Docker image
        run: |
          # Start container in background
          docker run -d -p 8080:8080 --name test-container robotics-cicd-demo:latest
          
          # Wait for container to start
          sleep 10
          
          # Test endpoints
          echo "Testing main endpoint..."
          curl -f http://localhost:8080/ || exit 1
          
          echo "Testing health endpoint..."
          curl -f http://localhost:8080/health || exit 1
          
          echo "Testing version endpoint..."
          curl -f http://localhost:8080/version || exit 1
          
          # Clean up
          docker stop test-container
          docker rm test-container
          
          echo "All tests passed!"
          
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
        
      - name: Build, tag, and push image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: robotics-cicd
          APP_VERSION: ${{ steps.version.outputs.version }}
          BUILD_DATE: ${{ steps.version.outputs.build_date }}
        run: |
          # Build image with version and ECR tags
          docker build \
            --build-arg APP_VERSION=$APP_VERSION \
            --build-arg BUILD_DATE="$BUILD_DATE" \
            -t $ECR_REGISTRY/$ECR_REPOSITORY:$APP_VERSION \
            -t $ECR_REGISTRY/$ECR_REPOSITORY:latest \
            -t $ECR_REGISTRY/$ECR_REPOSITORY:${{ github.sha }} \
            ./app
          
          # Push all tags to ECR
          echo "Pushing images to ECR..."
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$APP_VERSION
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:${{ github.sha }}
          
          echo "Images pushed successfully!"
          echo "Version tag: $ECR_REGISTRY/$ECR_REPOSITORY:$APP_VERSION"
          echo "Latest tag: $ECR_REGISTRY/$ECR_REPOSITORY:latest"
          echo "Commit tag: $ECR_REGISTRY/$ECR_REPOSITORY:${{ github.sha }}"
          
      - name: Create Git tag
        if: github.ref == 'refs/heads/main'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git tag ${{ steps.version.outputs.tag }}
          git push origin ${{ steps.version.outputs.tag }}